;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.4
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(defpackage :avar
  (:shadowing-import-from :cffi :defcallback)
  (:use :common-lisp :cffi :ccl))

(in-package :avar)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_new_MicroTestCppClass" new_MicroTestCppClass) :pointer)

(cl:export 'new_MicroTestCppClass)

(cffi:defcfun ("_wrap_MicroTestCppClass_StaticPublicMemberInt_set" MicroTestCppClass_StaticPublicMemberInt_set) :void
  (MicroTestCppClass_StaticPublicMemberInt :int))

(cl:export 'MicroTestCppClass_StaticPublicMemberInt_set)

(cffi:defcfun ("_wrap_MicroTestCppClass_StaticPublicMemberInt_get" MicroTestCppClass_StaticPublicMemberInt_get) :int)

(cl:export 'MicroTestCppClass_StaticPublicMemberInt_get)

(cffi:defcfun ("_wrap_delete_MicroTestCppClass" delete_MicroTestCppClass) :void
  (self :pointer))

(cl:export 'delete_MicroTestCppClass)

(cffi:defcvar ("a_global_int" a_global_int)
 :int)

(cl:export 'a_global_int)


